plugins {
    id 'com.android.application'
    id 'org.jetbrains.kotlin.android'
    id 'org.jetbrains.kotlin.kapt'
    id 'com.google.dagger.hilt.android'
    id 'com.google.gms.google-services'
    id 'com.google.firebase.crashlytics'
}

android {
    compileSdk rootProject.ext.compileSdk

    defaultConfig {
        applicationId "dev.veryniche.stitchcounter"
        minSdk rootProject.ext.minSdk
        targetSdk rootProject.ext.targetSdk

        //Set the first two digits of the version code to the targetSdkVersion, such as 28.
        //Set the next three digits to the product version, such as 152 for a product version of 1.5.2.
        //Set the next two digits to build or release number, such as 01.
        //Reserve the last two digits for a multi-APK variant, such as 00.

        //33.001.02.00

        versionCode 330010500
        versionName "1.0"
    }

    flavorDimensions "env"
    productFlavors {
        dev {
            applicationIdSuffix '.dev'
            versionNameSuffix ".dev"
            dimension 'env'
        }
        prod {
            dimension 'env'
        }
    }

    buildTypes {
        debug {
            versionNameSuffix ".debug"
        }
        release {
            debuggable false
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
    }
    buildFeatures {
        compose true
    }
    composeOptions {
        kotlinCompilerExtensionVersion libs.versions.compose.compiler.get()
    }
    kapt {
        correctErrorTypes true
    }
    packagingOptions {
        resources {
            excludes += "/META-INF/{AL2.0,LGPL2.1}"
        }
    }
    namespace 'dev.veryniche.stitchcounter'
}

dependencies {
    implementation project(':data')
    implementation project(':storage')
    // General compose dependencies

    implementation platform(libs.androidx.compose.bom)
    implementation libs.androidx.activity.compose
    implementation libs.androidx.compose.ui.tooling.preview

    // Compose for Wear OS Dependencies
    // NOTE: DO NOT INCLUDE a dependency on androidx.compose.material:material.
    // androidx.wear.compose:compose-material is designed as a replacement not an addition to
    // androidx.compose.material:material. If there are features from that you feel are missing from
    // androidx.wear.compose:compose-material please raise a bug to let us know:
    // https://issuetracker.google.com/issues/new?component=1077552&template=1598429&pli=1
    implementation libs.wear.compose.material
    implementation libs.compose.material.iconscore
    implementation libs.compose.material.iconsext

    // Foundation is additive, so you can use the mobile version in your Wear OS app.
    implementation libs.wear.compose.foundation

    // If you are using Compose Navigation, use the Wear OS version (NOT the
    // androidx.navigation:navigation-compose version), that is, uncomment the line below.
    implementation libs.wear.compose.navigation
    implementation libs.hilt.navigation.compose

    implementation libs.wear.input
    implementation libs.wear.interactions

    implementation libs.playservices.wearable

    implementation libs.androidx.compose.runtime.livedata
    
    implementation libs.hilt.android
    kapt libs.hilt.compiler

    implementation platform(libs.firebase.bom)
    implementation libs.firebase.analytics
    implementation libs.firebase.crashlytics
    debugImplementation platform(libs.firebase.bom)
    debugImplementation libs.firebase.analytics
    debugImplementation libs.firebase.crashlytics

    // Testing
    debugImplementation libs.androidx.compose.ui.tooling
}
